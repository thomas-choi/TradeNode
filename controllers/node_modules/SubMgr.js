var net = require('net');
var util = require('util');
var fs = require('fs');
var EventEmitter = require('events').EventEmitter;
var MktData = require('./TickData');
var MktStatus = require('./MktStatus');
var MSMgr = require('./MktMgr');
var DS = null;
var cmdstr = '';
var simMode = false;

module.exports = new EventEmitter();

var   buffer = '';
var   page = 0;
var   linecount = 0;
var   myLog = null;

function init(logger) {
    myLog = logger;
    myLog.info('SubMgr.init');
    MktData.init(logger); 
}

function PxUpdate(data) {
    var   i = -1;
    var   tdata = null;
    var   line = ''; 
    var   line2 = '';
    var    splitData = null;
    buffer += data; 
    i = buffer.indexOf('\n');
    page += 1; 
   
    while (i  > -1) {
 
        line = buffer.substring(0, i); 
        linecount += 1; 
        myLog.debug('['+page+'.' + linecount + '] ' + line); 

	splitData = line.split('] ');
	line2 = splitData[1];

        splitData = line2.split('|');
        if (splitData[0] != 'image' && splitData[0] != 'update') {
            myLog.debug('unknown command from : ' + line2); 
         } else if (splitData[1] == 'EXCH_STATUS') {
            tdata = MktStatus.Parse(splitData);
            if (tdata) {
                myLog.debug(tdata.toString());      
                MSMgr.emit(tdata.exchange, tdata);            
            }  
        } else if (MktData.getTickData(splitData[1])) {
            tdata = MktData.Parse(splitData);
            if (tdata) {
                var   ms = MktStatus.setMktStatus(tdata.exchange, tdata.subMkt);
                if (ms && ms.mopen) 
                    myLog.debug(tdata.toString());      
                    module.exports.emit(tdata.symbol, tdata);
           }
        }
        
        buffer = buffer.substring(i+1);
        i = buffer.indexOf('\n');
    }   
}


function NewSub(evt, fn) {
        var    td = MktData.getTickData(evt);

        if (!td) {  // send open if symbol not open before
            myLog.info('SubMgr: event='+evt);
            cmdstr = 'open|'+evt+'|'+evt+'|mode|both|\n';
            myLog.info(cmdstr);
            if (DS)
                DS.write(cmdstr);
            MktData.setTickData(evt);
        }
}

function start(port, host) { 
    myLog.info('SubMgr started:');
    DS = net.connect(port, host, function() {
        myLog.info('DS connected @ ' + host + ':' + port);
        cmdstr = 'open|EXCH_STATUS|EXCH_STATUS|mode|both|\n';
        myLog.info(cmdstr);
        DS.write(cmdstr);
    });
    DS.on('data', PxUpdate);
    DS.on('end', function() {
        myLog.info('client disconnected');
        DS = null;
    });
}

function convertdate(inDate) {
    var splitdate = inDate.split('/');
    var outDate =  splitdate[2]+splitdate[0]+splitdate[1];
    return outDate; 
}

function startSim(simdate) { 
    var   localdate = convertdate(simdate)
    myLog.log('startsim:'+util.inspect(localdate));
    var   path = 'R:\\'+localdate+'\\atsmsg.txt';
//    var   path = 'D:\\MarketData\\'+localdate+'\\atsmsg.txt';
    myLog.info('startSim: path = '+path); 
    var   stream = fs.createReadStream(path);
   
    stream.on('open', function(fd) {
        myLog.info('Open '+path+' of fd='+fd);
    });
    stream.on('end', function() {
        myLog.info('simulation data file end');
    });
    stream.on('data', PxUpdate);
    stream.on('error', function(exception) {    
        myLog.info('Stream has error: '+util.inspect(exception));
    });
    simMode = true; 
    myLog.info('startSim: the stream = '+util.inspect(stream));
   return stream; 
}

function stop() {
    if (DS)
        DS.end();
}

module.exports.on('newListener', NewSub);

module.exports.startSim = startSim;
module.exports.start = start;
module.exports.stop = stop;
module.exports.init = init;
