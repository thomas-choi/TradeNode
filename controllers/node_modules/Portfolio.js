// JScript source code
var HashO = require('./hash');
var APL = require('./Log');
var Hash = HashO.CreateHash();
var   mylogger = null;

function init(logger) {
    mylogger = logger;
} 

function PortFolio(account) {
    this.account = account;
    this.positions = HashO.CreateHash();
    this.adjustPos = function(sym, qty, cost) {
        var   p = this.positions.getItem(sym);
        if (!p) {
            p = new Pos(sym);
            p.qty = qty;
            p.cost = cost;
            this.positions.setItem(p.symbol, p);
        } else {
            p.qty += qty;
            p.cost += cost;
        }
        if (p.qty == 0.0) {
            p.tPnL += p.cost;     // if position is closed, take the cost into total PnL 
            p.cost = 0.0;
            p.uPnL = 0.0;
        }
        mylogger.info('adjusted Pos(' + p.symbol+','+p.qty+','+p.cost+') total P&L='+p.tPnL+', unR P&L='+p.uPnL)
    }  
    this.adjustPrice = function(sym, last, bs) {
        var   p = this.positions.getItem(sym);
        if (p) {
            if (p.qty != 0.0) {
                p.uPnL = p.cost + bs* Math.abs(p.qty) * last;
                mylogger.info('adjusted Price(' + p.symbol+','+p.qty+','+p.cost+') total P&L='+p.tPnL+', unR P&L='+p.uPnL+', Last='+last)
           }
        }           
    }  
    this.getPosition = function(sym) {
        return this.positions.getItem(sym); 
    }  
}

function Pos(sym) {
    this.symbol = sym;
    this.qty = 0.0;
    this.cost = 0.0;     // cost of the open position
    this.uPnL = 0.0;  // unrealized P&L
    this.tPnL = 0.0;   // total realized P&L
}

function getPortfolio(account) {
    var   pt = Hash.getItem(account);
    if (!pt) {
        pt = new PortFolio(account);
        mylogger.info('Create new portfolio for account='+account);
        Hash.setItem(account, pt);
    }
    return pt;  
}

exports.Pos = Pos;
exports.getPortfolio = getPortfolio;
exports.init = init;
