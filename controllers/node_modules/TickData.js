// JScript source code
var HashO = require('./hash');
var APL = require('./Log');
var tickHash = HashO.CreateHash();
var mylogger = null;

function init(logger) {
    if (!mylogger)
        mylogger = logger;
}
 
function TickData(sym) {
    this.symbol = sym;
    this.last = 0.0;
    this.bid = 0.0;
    this.bid_size = 0.0;
    this.ask = 0.0;
    this.ask_size = 0.0;
    this.open = 0.0;
    this.name =  '';
    this.time = 0.0;
    this.exchange = '';
    this.subMkt = '';
}
TickData.prototype.toString = function(){
    return APL.toStr(this);
}
TickData.prototype.Assign = function(TD) {
    this.symbol = TD.symbol;
    this.bid = TD.bid;
    this.bid_size = TD.bid_size;  
    this.ask = TD.ask;
    this.ask_size = TD.ask_size;
    this.name = TD.name;
    this.time = TD.time;
    this.last = TD.last;
    this.open = TD.open;  
    this.exchange = TD.name;
    this.subMkt = TD.subMkt;
}

function ParseTime(timestr) {
    var ts = timestr.split(':');   
    var  i,  it =0;
    for (i=0; i < ts.length; i+=1) {
        it = it * 100 + parseFloat(ts[i]);
    }
    return it; 
}


function getTickData(symbol) {
    return tickHash.getItem(symbol);
}

function setTickData(symbol) {
    var    td = tickHash.getItem(symbol);
    if (!td) {
        td = new TickData(symbol);
        tickHash.setItem(symbol, td);
    }  
    return td;
}

function Parse(splitPx) {
    var     sym = splitPx[ 1];
    var     tdata = null;

    tdata = tickHash.getItem(sym);
 
    if (tdata) {
        mylogger.debug('Parse line find sym=' + sym);
    } else {
        tdata = new TickData(sym);
        tickHash.setItem(sym, tdata);
        mylogger.debug('Parse line new sym=' + sym);
    }

    for (i=2; i < splitPx.length; i+=2) {
        switch (splitPx[i]) {
            case '1': tdata.bid = parseFloat(splitPx[i+1]); break;
            case '2': tdata.ask = parseFloat(splitPx[i+1]); break;
            case '3': tdata.last = parseFloat(splitPx[i+1]); break;
            case '33': tdata.time = ParseTime(splitPx[i+1]); break;
            case '31': tdata.pclose = parseFloat(splitPx[i+1]); break;
            case '16': tdata.bid_size = parseFloat(splitPx[i+1]); break;
            case '19': tdata.ask_size = parseFloat(splitPx[i+1]); break;
            case '20': tdata.exchange = splitPx[i+1]; break;
            case '21': tdata.name = splitPx[i+1]; break;
            case '133': tdata.open = parseFloat(splitPx[i+1]); break;
            case '75': tdata.subMkt = splitPx[i+1]; break;
        }      
    } 
           
   return tdata;
}
exports.TickData = function () {
    return new TickData();
}
exports.Parse = Parse;
exports.getTickData = getTickData;
exports.setTickData = setTickData;
exports.init = init;
